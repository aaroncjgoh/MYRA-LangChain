{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/src/app/page.tsx"],"sourcesContent":["\"use client\";\n// frontend/components/MostRecentStrategyDisplay.js\nimport React, { useState, useEffect } from 'react';\n\n// Define the type for your strategy object\n// This tells TypeScript what properties to expect on the 'strategy' state\ninterface StrategyOutput {\n  timestamp: string; // Assuming timestamp is converted to string (ISO format) by backend\n  input_query: string; // This is what you're using for 'description'\n  // Add other properties if you decide to display them later, e.g.:\n  // tool_name?: string;\n  // tool_output_data?: any; // Or a more specific type for your backtest data\n}\n\nconst MostRecentStrategyDisplay = () => {\n  // Explicitly type the strategy state: StrategyOutput or null\n  const [strategy, setStrategy] = useState<StrategyOutput | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchRecentStrategy = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        // Ensure this URL matches your backend's URL and endpoint\n        const response = await fetch('http://localhost:8000/api/most_recent_strategy');\n        \n        if (!response.ok) {\n          if (response.status === 404) {\n            setStrategy(null); // Explicitly set to null if no strategy found\n            return; // No error, just no data\n          }\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        if (result.success && result.data) {\n          // TypeScript now knows result.data should conform to StrategyOutput\n          setStrategy(result.data as StrategyOutput); \n        } else {\n          setStrategy(null);\n          setError(result.message || 'Failed to fetch strategy data.');\n        }\n      } catch (e) {\n        console.error(\"Error fetching most recent strategy:\", e);\n        setError(\"Could not load recent strategy. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRecentStrategy();\n  }, []); // Empty dependency array means this runs once on mount\n\n  if (loading) {\n    return (\n      <div className=\"p-4 bg-white text-black rounded-lg shadow-lg animate-pulse\">\n        <p className=\"text-lg font-semibold mb-2\">Loading Recent Strategy...</p>\n        <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-4 bg-red-600 text-white rounded-lg shadow-lg\">\n        <p className=\"text-lg font-semibold mb-2\">Error</p>\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  if (!strategy) {\n    return (\n      <div className=\"p-4 bg-white text-gray-600 rounded-lg shadow-lg\">\n        <p className=\"text-lg font-semibold mb-2\">No Recent Strategy Found</p>\n        <p className=\"text-sm\">Run a backtest to see results here!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 bg-white text-black rounded-lg shadow-lg h-full overflow-y-auto\">\n      <h2 className=\"text-xl font-bold mb-4 text-indigo-700\">Most Recent Backtest</h2>\n      \n      <div className=\"mb-4\">\n        <p className=\"text-sm text-gray-700\">Last Updated:</p>\n        <p className=\"text-base font-medium\">{strategy.timestamp ? new Date(strategy.timestamp).toLocaleString() : 'N/A'}</p>\n      </div>\n\n      <div className=\"mb-4\">\n        <p className=\"text-sm text-gray-700\">Description:</p>\n        {/* Changed 'description' back to 'input_query' as per your backend data */}\n        <p className=\"text-base font-medium\">{strategy.input_query || 'N/A'}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MostRecentStrategyDisplay;\n"],"names":[],"mappings":";;;;AACA,mDAAmD;AACnD;AAFA;;;AAcA,MAAM,4BAA4B;IAChC,6DAA6D;IAC7D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAyB;IAChE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,sBAAsB;YAC1B,IAAI;gBACF,WAAW;gBACX,SAAS;gBACT,0DAA0D;gBAC1D,MAAM,WAAW,MAAM,MAAM;gBAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,IAAI,SAAS,MAAM,KAAK,KAAK;wBAC3B,YAAY,OAAO,8CAA8C;wBACjE,QAAQ,yBAAyB;oBACnC;oBACA,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;gBAC1D;gBAEA,MAAM,SAAS,MAAM,SAAS,IAAI;gBAClC,IAAI,OAAO,OAAO,IAAI,OAAO,IAAI,EAAE;oBACjC,oEAAoE;oBACpE,YAAY,OAAO,IAAI;gBACzB,OAAO;oBACL,YAAY;oBACZ,SAAS,OAAO,OAAO,IAAI;gBAC7B;YACF,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC,wCAAwC;gBACtD,SAAS;YACX,SAAU;gBACR,WAAW;YACb;QACF;QAEA;IACF,GAAG,EAAE,GAAG,uDAAuD;IAE/D,IAAI,SAAS;QACX,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAE,WAAU;8BAA6B;;;;;;8BAC1C,8OAAC;oBAAI,WAAU;;;;;;8BACf,8OAAC;oBAAI,WAAU;;;;;;;;;;;;IAGrB;IAEA,IAAI,OAAO;QACT,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAE,WAAU;8BAA6B;;;;;;8BAC1C,8OAAC;8BAAG;;;;;;;;;;;;IAGV;IAEA,IAAI,CAAC,UAAU;QACb,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAE,WAAU;8BAA6B;;;;;;8BAC1C,8OAAC;oBAAE,WAAU;8BAAU;;;;;;;;;;;;IAG7B;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAyC;;;;;;0BAEvD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;kCACrC,8OAAC;wBAAE,WAAU;kCAAyB,SAAS,SAAS,GAAG,IAAI,KAAK,SAAS,SAAS,EAAE,cAAc,KAAK;;;;;;;;;;;;0BAG7G,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;kCAErC,8OAAC;wBAAE,WAAU;kCAAyB,SAAS,WAAW,IAAI;;;;;;;;;;;;;;;;;;AAItE;uCAEe"}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAQzC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1CJ,OAAOC,OAAO,GAAGC,QAAQ;QAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACO,SAAS,EAAE;;QAIlC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,0HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0]}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,0HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0]}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}