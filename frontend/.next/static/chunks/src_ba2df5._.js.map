{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/src/components/MarkdownRenderer.tsx"],"sourcesContent":["import ReactMarkdown from \"react-markdown\";\nimport { memo } from \"react\";\nimport remarkGfm from \"remark-gfm\";\n\nconst MarkdownRenderer = memo(({ content }: { content: string }) => {\n  const parsedContent = content.replace(/\\\\n/g, '\\n'); // Parse the escape sequences to convert \\n to actual linebreaks\n  return <ReactMarkdown remarkPlugins={[remarkGfm]}>{parsedContent}</ReactMarkdown>;\n});\n\nexport default MarkdownRenderer;\n"],"names":[],"mappings":";;;;AACA;AADA;AAEA;;;;;AAEA,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,OAAI,AAAD,OAAE,CAAC,EAAE,OAAO,EAAuB;IAC7D,MAAM,gBAAgB,QAAQ,OAAO,CAAC,QAAQ,OAAO,gEAAgE;IACrH,qBAAO,6LAAC,2LAAA,CAAA,UAAa;QAAC,eAAe;YAAC,gJAAA,CAAA,UAAS;SAAC;kBAAG;;;;;;AACrD;;uCAEe"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport MarkdownRenderer from \"@/components/MarkdownRenderer\";\nimport { Step, type ChatOutput } from \"@/types\";\nimport { useEffect, useState } from \"react\";\n\n// Define the interface for your Output component's props\ninterface OutputProps {\n  output: ChatOutput;\n  isGenerating: boolean; // This prop indicates if the agent is currently generating\n}\n\nconst Output = ({ output, isGenerating }: OutputProps) => {\n  // `detailsHidden` checks if the final answer has started appearing.\n  // This can be used to control the visibility of the 'Steps' details.\n  const detailsHidden = !!output.result?.answer;\n\n  return (\n    <div className=\"border-t border-gray-700 py-10 first-of-type:pt-0 first-of-type:border-t-0\">\n      {/* User's Question */}\n      <p className=\"text-3xl\">{output.question}</p>\n\n      {/* Steps Section */}\n      {/* Display steps if there are any, and control their visibility with 'detailsHidden' */}\n      {output.steps.length > 0 && (\n        <GenerationSteps steps={output.steps} done={detailsHidden} />\n      )}\n\n      {/* AI Agent's Final Answer / Loading State */}\n      {/*\n        Conditional rendering logic:\n        1. IF isGenerating is true AND output.result?.answer is NOT yet available:\n           Show the loading spinner and \"Agent is thinking...\" message.\n        2. ELSE IF output.result?.answer IS available (even if generating has just finished):\n           Show the MarkdownRenderer with the answer.\n      */}\n      {isGenerating && !output.result?.answer ? (\n        // Loading state: Spinner and message\n        <div className=\"mt-5 text-gray-500 animate-pulse\">\n          <p>Agent is thinking...</p>\n          <div className=\"flex justify-center items-center h-20\">\n            {/* Tailwind CSS spinner SVG - animates due to 'animate-spin' class */}\n            <svg\n              className=\"animate-spin h-8 w-8 text-gray-400\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              ></path>\n            </svg>\n          </div>\n        </div>\n      ) : (\n        // Display the actual output answer once it's available\n        // Ensure output.result.answer exists before rendering MarkdownRenderer\n        output.result?.answer && (\n          <div\n            className=\"mt-5 prose dark:prose-invert min-w-full prose-pre:whitespace-pre-wrap text-gray-900\" // Added text-gray-900 for dark text\n            style={{\n              overflowWrap: \"anywhere\",\n            }}\n          >\n            <MarkdownRenderer content={output.result.answer} />\n          </div>\n        )\n      )}\n\n      {/* Tools Used Section */}\n      {output.result?.tools_used?.length > 0 && (\n        <div className=\"flex items-baseline mt-5 gap-1\">\n          <p className=\"text-xs text-gray-500\">Tools used:</p>\n\n          <div className=\"flex flex-wrap items-center gap-1\">\n            {output.result.tools_used.map((tool, i) => (\n              <p\n                key={i}\n                className=\"text-xs px-1 py-[1px] bg-gray-800 rounded text-white\"\n              >\n                {tool}\n              </p>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// GenerationSteps Component (No changes here, it uses its own 'done' prop)\nconst GenerationSteps = ({ steps, done }: { steps: Step[]; done: boolean }) => {\n  const [hidden, setHidden] = useState(false);\n\n  useEffect(() => {\n    if (done) setHidden(true);\n  }, [done]);\n\n  return (\n    <div className=\"border border-gray-700 rounded mt-5 p-3 flex flex-col\">\n      <button\n        className=\"w-full text-left flex items-center justify-between\"\n        onClick={() => setHidden(!hidden)}\n      >\n        Steps {hidden ? <ChevronDown /> : <ChevronUp />}\n      </button>\n\n      {!hidden && (\n        <div className=\"flex gap-2 mt-2\">\n          <div className=\"pt-2 flex flex-col items-center shrink-0\">\n            <span\n              className={`inline-block w-3 h-3 transition-colors rounded-full ${\n                !done ? \"animate-pulse bg-emerald-400\" : \"bg-gray-500\"\n              }`}\n            ></span>\n\n            <div className=\"w-[1px] grow border-l border-gray-700\"></div>\n          </div>\n\n          <div className=\"space-y-2.5\">\n            {steps.map((step, j) => {\n              return (\n                <div key={j}>\n                  <p>{step.name}</p>\n\n                  <div className=\"flex flex-wrap items-center gap-1 mt-1\">\n                    {Object.entries(step.result).map(([key, value]) => {\n                      return (\n                        <p\n                          key={key}\n                          className=\"text-xs px-1.5 py-0.5 bg-gray-800 rounded text-white\"\n                        >\n                          {key}: {value}\n                        </p>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// ChevronDown Component (No changes)\nconst ChevronDown = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"lucide lucide-chevron-down\"\n  >\n    <path d=\"m6 9 6 6 6-6\" />\n  </svg>\n);\n\n// ChevronUp Component (No changes)\nconst ChevronUp = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"lucide lucide-chevron-up\"\n  >\n    <path d=\"m18 15-6-6-6 6\" />\n  </svg>\n);\n\nexport default Output;"],"names":[],"mappings":";;;;AAEA;AAEA;;;AAJA;;;AAYA,MAAM,SAAS,CAAC,EAAE,MAAM,EAAE,YAAY,EAAe;IACnD,oEAAoE;IACpE,qEAAqE;IACrE,MAAM,gBAAgB,CAAC,CAAC,OAAO,MAAM,EAAE;IAEvC,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAE,WAAU;0BAAY,OAAO,QAAQ;;;;;;YAIvC,OAAO,KAAK,CAAC,MAAM,GAAG,mBACrB,6LAAC;gBAAgB,OAAO,OAAO,KAAK;gBAAE,MAAM;;;;;;YAW7C,gBAAgB,CAAC,OAAO,MAAM,EAAE,SAC/B,qCAAqC;0BACrC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;kCAAE;;;;;;kCACH,6LAAC;wBAAI,WAAU;kCAEb,cAAA,6LAAC;4BACC,WAAU;4BACV,OAAM;4BACN,MAAK;4BACL,SAAQ;;8CAER,6LAAC;oCACC,WAAU;oCACV,IAAG;oCACH,IAAG;oCACH,GAAE;oCACF,QAAO;oCACP,aAAY;;;;;;8CAEd,6LAAC;oCACC,WAAU;oCACV,MAAK;oCACL,GAAE;;;;;;;;;;;;;;;;;;;;;;uBAMV,uDAAuD;YACvD,uEAAuE;YACvE,OAAO,MAAM,EAAE,wBACb,6LAAC;gBACC,WAAU,sFAAsF,oCAAoC;;gBACpI,OAAO;oBACL,cAAc;gBAChB;0BAEA,cAAA,6LAAC,yIAAA,CAAA,UAAgB;oBAAC,SAAS,OAAO,MAAM,CAAC,MAAM;;;;;;;;;;;YAMpD,OAAO,MAAM,EAAE,YAAY,SAAS,mBACnC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAE,WAAU;kCAAwB;;;;;;kCAErC,6LAAC;wBAAI,WAAU;kCACZ,OAAO,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,kBACnC,6LAAC;gCAEC,WAAU;0CAET;+BAHI;;;;;;;;;;;;;;;;;;;;;;AAWrB;KAtFM;AAwFN,2EAA2E;AAC3E,MAAM,kBAAkB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAoC;;IACxE,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAErC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,IAAI,MAAM,UAAU;QACtB;oCAAG;QAAC;KAAK;IAET,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBACC,WAAU;gBACV,SAAS,IAAM,UAAU,CAAC;;oBAC3B;oBACQ,uBAAS,6LAAC;;;;6CAAiB,6LAAC;;;;;;;;;;;YAGpC,CAAC,wBACA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCACC,WAAW,CAAC,oDAAoD,EAC9D,CAAC,OAAO,iCAAiC,eACzC;;;;;;0CAGJ,6LAAC;gCAAI,WAAU;;;;;;;;;;;;kCAGjB,6LAAC;wBAAI,WAAU;kCACZ,MAAM,GAAG,CAAC,CAAC,MAAM;4BAChB,qBACE,6LAAC;;kDACC,6LAAC;kDAAG,KAAK,IAAI;;;;;;kDAEb,6LAAC;wCAAI,WAAU;kDACZ,OAAO,OAAO,CAAC,KAAK,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM;4CAC5C,qBACE,6LAAC;gDAEC,WAAU;;oDAET;oDAAI;oDAAG;;+CAHH;;;;;wCAMX;;;;;;;+BAbM;;;;;wBAiBd;;;;;;;;;;;;;;;;;;AAMZ;GAtDM;MAAA;AAwDN,qCAAqC;AACrC,MAAM,cAAc,kBAClB,6LAAC;QACC,OAAM;QACN,OAAM;QACN,QAAO;QACP,SAAQ;QACR,MAAK;QACL,QAAO;QACP,aAAY;QACZ,eAAc;QACd,gBAAe;QACf,WAAU;kBAEV,cAAA,6LAAC;YAAK,GAAE;;;;;;;;;;;MAbN;AAiBN,mCAAmC;AACnC,MAAM,YAAY,kBAChB,6LAAC;QACC,OAAM;QACN,OAAM;QACN,QAAO;QACP,SAAQ;QACR,MAAK;QACL,QAAO;QACP,aAAY;QACZ,eAAc;QACd,gBAAe;QACf,WAAU;kBAEV,cAAA,6LAAC;YAAK,GAAE;;;;;;;;;;;MAbN;uCAiBS"}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}