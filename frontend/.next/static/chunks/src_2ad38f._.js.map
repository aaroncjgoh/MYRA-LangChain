{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/src/components/MarkdownRenderer.tsx"],"sourcesContent":["import ReactMarkdown from \"react-markdown\";\nimport { memo } from \"react\";\nimport remarkGfm from \"remark-gfm\";\n\nconst MarkdownRenderer = memo(({ content }: { content: string }) => {\n  const parsedContent = content.replace(/\\\\n/g, '\\n'); // Parse the escape sequences to convert \\n to actual linebreaks\n  return <ReactMarkdown remarkPlugins={[remarkGfm]}>{parsedContent}</ReactMarkdown>;\n});\n\nexport default MarkdownRenderer;\n"],"names":[],"mappings":";;;;AACA;AADA;AAEA;;;;;AAEA,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,OAAI,AAAD,OAAE,CAAC,EAAE,OAAO,EAAuB;IAC7D,MAAM,gBAAgB,QAAQ,OAAO,CAAC,QAAQ,OAAO,gEAAgE;IACrH,qBAAO,6LAAC,2LAAA,CAAA,UAAa;QAAC,eAAe;YAAC,gJAAA,CAAA,UAAS;SAAC;kBAAG;;;;;;AACrD;;uCAEe"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/src/components/Output.tsx"],"sourcesContent":["// src/components/Output.tsx\n\"use client\"; // Ensure this directive is at the very top for client-side hooks\n\nimport MarkdownRenderer from \"@/components/MarkdownRenderer\";\nimport { Step, type ChatOutput } from \"@/types\";\nimport { useEffect, useState } from \"react\";\n\n// Define the interface for your Output component's props\ninterface OutputProps {\n  output: ChatOutput;\n  isGenerating: boolean; // Added this prop to control loading state\n}\n\nconst Output = ({ output, isGenerating }: OutputProps) => { // Destructure isGenerating here\n  const detailsHidden = !!output.result?.answer;\n\n  return (\n    <div className=\"border-t border-gray-700 py-10 first-of-type:pt-0 first-of-type:border-t-0\">\n      <p className=\"text-3xl\">{output.question}</p>\n\n      {/* Steps */}\n      {output.steps.length > 0 && (\n        <GenerationSteps steps={output.steps} done={detailsHidden} />\n      )}\n\n      {/* Output / Loading Spinner */}\n      {/*\n        Display loading spinner IF agent is generating AND the final answer is not yet available.\n        Otherwise, display the MarkdownRenderer (if output.result.answer exists).\n      */}\n      {isGenerating && !output.result?.answer ? (\n        // Loading state: Spinner and message\n        <div className=\"mt-5 text-gray-500 animate-pulse\">\n          <p>MYRA is thinking...</p>\n          <div className=\"flex justify-center items-center h-20\">\n            {/* Simple Tailwind CSS spinner SVG */}\n            <svg\n              className=\"animate-spin h-8 w-8 text-gray-400\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              ></path>\n            </svg>\n          </div>\n        </div>\n      ) : (\n        // Display the actual output answer once it's available\n        // Ensure output.result.answer exists before rendering MarkdownRenderer\n        output.result?.answer && (\n          <div\n            className=\"mt-5 prose dark:prose-invert min-w-full prose-pre:whitespace-pre-wrap text-gray-900\"\n            style={{\n              overflowWrap: \"anywhere\",\n            }}\n          >\n            <MarkdownRenderer content={output.result.answer} />\n          </div>\n        )\n      )}\n\n      {/* Tools */}\n      {output.result?.tools_used?.length > 0 && (\n        <div className=\"flex items-baseline mt-5 gap-1\">\n          <p className=\"text-xs text-gray-500\">Tools used:</p>\n\n          <div className=\"flex flex-wrap items-center gap-1\">\n            {output.result.tools_used.map((tool, i) => (\n              <p\n                key={i}\n                className=\"text-xs px-1 py-[1px] bg-gray-800 rounded text-white\"\n              >\n                {tool}\n              </p>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// GenerationSteps Component - This component also uses useState and useEffect\n// For a clean separation, it's best practice to add \"use client\" to this file as well\n// if it's a separate file, or keep it as part of Output.tsx if it's only used here.\n// Assuming it's in the same file for minimal changes to your project structure.\nconst GenerationSteps = ({ steps, done }: { steps: Step[]; done: boolean }) => {\n  const [hidden, setHidden] = useState(false);\n\n  useEffect(() => {\n    if (done) setHidden(true);\n  }, [done]);\n\n  return (\n    <div className=\"border border-gray-700 rounded mt-5 p-3 flex flex-col\">\n      <button\n        className=\"w-full text-left flex items-center justify-between\"\n        onClick={() => setHidden(!hidden)}\n      >\n        Steps {hidden ? <ChevronDown /> : <ChevronUp />}\n      </button>\n\n      {!hidden && (\n        <div className=\"flex gap-2 mt-2\">\n          <div className=\"pt-2 flex flex-col items-center shrink-0\">\n            <span\n              className={`inline-block w-3 h-3 transition-colors rounded-full ${\n                !done ? \"animate-pulse bg-emerald-400\" : \"bg-gray-500\"\n              }`}\n            ></span>\n\n            <div className=\"w-[1px] grow border-l border-gray-700\"></div>\n          </div>\n\n          <div className=\"space-y-2.5\">\n            {steps.map((step, j) => {\n              return (\n                <div key={j}>\n                  <p>{step.name}</p>\n\n                  <div className=\"flex flex-wrap items-center gap-1 mt-1\">\n                    {Object.entries(step.result).map(([key, value]) => {\n                      return (\n                        <p\n                          key={key}\n                          className=\"text-xs px-1.5 py-0.5 bg-gray-800 rounded text-white\"\n                        >\n                          {key}: {value}\n                        </p>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// ChevronDown Component (No changes - doesn't use hooks)\nconst ChevronDown = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"lucide lucide-chevron-down\"\n  >\n    <path d=\"m6 9 6 6 6-6\" />\n  </svg>\n);\n\n// ChevronUp Component (No changes - doesn't use hooks)\nconst ChevronUp = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"lucide lucide-chevron-up\"\n  >\n    <path d=\"m18 15-6-6-6 6\" />\n  </svg>\n);\n\nexport default Output;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/src/components/TextArea.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { IncompleteJsonParser } from \"incomplete-json-parser\";\nimport { ChatOutput } from \"@/types\";\n\nconst TextArea = ({\n  className,\n  setIsGenerating,\n  isGenerating,\n  setOutputs,\n  outputs,\n}: {\n  className?: string;\n  setIsGenerating: React.Dispatch<React.SetStateAction<boolean>>;\n  isGenerating: boolean;\n  setOutputs: React.Dispatch<React.SetStateAction<ChatOutput[]>>;\n  outputs: ChatOutput[];\n}) => {\n  // Parser instance to handle incomplete JSON streaming responses\n  const parser = new IncompleteJsonParser();\n\n  const [text, setText] = useState(\"\");\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  // Handles form submission\n  async function submit(e: React.FormEvent) {\n    e.preventDefault();\n    sendMessage(text);\n    setText(\"\");\n  }\n\n  // Sends message to the api and handles streaming response processing\n  const sendMessage = async (text: string) => {\n    const newOutputs = [\n      ...outputs,\n      {\n        question: text,\n        steps: [],\n        result: {\n          answer: \"\",\n          tools_used: [],\n        },\n      },\n    ];\n\n    setOutputs(newOutputs);\n    setIsGenerating(true);\n\n    try {\n      const res = await fetch(`http://localhost:8000/invoke?content=${text}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(text),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Error\");\n      }\n\n      const data = res.body;\n      if (!data) {\n        setIsGenerating(false);\n        return;\n      }\n\n      const reader = data.getReader();\n      const decoder = new TextDecoder();\n      let done = false;\n      let answer = { answer: \"\", tools_used: [] };\n      let currentSteps: { name: string; result: Record<string, string> }[] = [];\n      let buffer = \"\";\n\n      // Process streaming response chunks and parse steps/results\n      while (!done) {\n        const { value, done: doneReading } = await reader.read();\n        done = doneReading;\n        let chunkValue = decoder.decode(value);\n        // console.log(`chunk: ${chunkValue}`);\n        if (!chunkValue) continue;\n\n        buffer += chunkValue;\n\n        // Handle different types of steps in the response stream - regular steps and final answer\n        if (buffer.includes(\"</step_name>\")) {\n          const stepNameMatch = buffer.match(/<step_name>([^<]*)<\\/step_name>/);\n          if (stepNameMatch) {\n            const [_, stepName] = stepNameMatch;\n            try {\n              if (stepName !== \"final_answer\") {\n                const fullStepPattern =\n                  /<step><step_name>([^<]*)<\\/step_name>([^<]*?)(?=<step>|<\\/step>|$)/g;\n                const matches = [...buffer.matchAll(fullStepPattern)];\n\n                for (const match of matches) {\n                  const [fullMatch, matchStepName, jsonStr] = match;\n                  if (jsonStr) {\n                    try {\n                      const result = JSON.parse(jsonStr);\n                      currentSteps.push({ name: matchStepName, result });\n                      buffer = buffer.replace(fullMatch, \"\");\n                    } catch (error) {\n                    }\n                  }\n                }\n              } else {\n                // If it's the final answer step, parse the streaming JSON using incomplete-json-parser\n                const jsonMatch = buffer.match(\n                  /(?<=<step><step_name>final_answer<\\/step_name>)(.*)/\n                );\n                if (jsonMatch) {\n                  const [_, jsonStr] = jsonMatch;\n                  parser.write(jsonStr);\n                  const result = parser.getObjects();\n                  answer = result;\n                  parser.reset();\n                }\n              }\n            } catch (e) {\n              console.log(\"Failed to parse step:\", e);\n            }\n          }\n        }\n\n        // Update output with current content and steps\n        setOutputs((prevState) => {\n          const lastOutput = prevState[prevState.length - 1];\n          return [\n            ...prevState.slice(0, -1),\n            {\n              ...lastOutput,\n              steps: currentSteps,\n              result: answer,\n            },\n          ];\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Submit form when Enter is pressed (without Shift)\n  function submitOnEnter(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n    if (e.code === \"Enter\" && !e.shiftKey) {\n      submit(e);\n    }\n  }\n\n  // Dynamically adjust textarea height based on content\n  const adjustHeight = () => {\n    const textArea = textAreaRef.current;\n    if (textArea) {\n      textArea.style.height = \"auto\";\n      textArea.style.height = `${textArea.scrollHeight}px`;\n    }\n  };\n\n  // Adjust height whenever text content changes\n  useEffect(() => {\n    adjustHeight();\n  }, [text]);\n\n  // Add resize event listener to adjust height on window resize\n  useEffect(() => {\n    const handleResize = () => adjustHeight();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <form\n      onSubmit={submit}\n      className={`flex gap-3 z-10 ${\n        outputs.length > 0 ? \"fixed bottom-0 left-0 right-0 container pb-5\" : \"\"\n      }`}\n    >\n      <div className=\"w-full flex items-center bg-gray-800 rounded border border-gray-600 text-white\">\n        <textarea\n          ref={textAreaRef}\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onKeyDown={(e) => submitOnEnter(e)}\n          rows={1}\n          className=\"w-full p-3 bg-transparent min-h-20 focus:outline-none resize-none\"\n          placeholder=\"Ask a question...\"\n        />\n\n        <button\n          type=\"submit\"\n          disabled={isGenerating || !text}\n          className=\"disabled:bg-gray-500 bg-[#09BDE1] transition-colors w-9 h-9 rounded-full shrink-0 flex items-center justify-center mr-2\"\n        >\n          <ArrowIcon />\n        </button>\n      </div>\n    </form>\n  );\n};\n\nconst ArrowIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"lucide lucide-arrow-right\"\n  >\n    <path d=\"M5 12h14\" />\n    <path d=\"m12 5 7 7-7 7\" />\n  </svg>\n);\n\nexport default TextArea;\n"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAMA,MAAM,WAAW,CAAC,EAChB,SAAS,EACT,eAAe,EACf,YAAY,EACZ,UAAU,EACV,OAAO,EAOR;;IACC,gEAAgE;IAChE,MAAM,SAAS,IAAI,gKAAA,CAAA,uBAAoB;IAEvC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAuB;IAEhD,0BAA0B;IAC1B,eAAe,OAAO,CAAkB;QACtC,EAAE,cAAc;QAChB,YAAY;QACZ,QAAQ;IACV;IAEA,qEAAqE;IACrE,MAAM,cAAc,OAAO;QACzB,MAAM,aAAa;eACd;YACH;gBACE,UAAU;gBACV,OAAO,EAAE;gBACT,QAAQ;oBACN,QAAQ;oBACR,YAAY,EAAE;gBAChB;YACF;SACD;QAED,WAAW;QACX,gBAAgB;QAEhB,IAAI;YACF,MAAM,MAAM,MAAM,MAAM,CAAC,qCAAqC,EAAE,MAAM,EAAE;gBACtE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,CAAC,IAAI,EAAE,EAAE;gBACX,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,OAAO,IAAI,IAAI;YACrB,IAAI,CAAC,MAAM;gBACT,gBAAgB;gBAChB;YACF;YAEA,MAAM,SAAS,KAAK,SAAS;YAC7B,MAAM,UAAU,IAAI;YACpB,IAAI,OAAO;YACX,IAAI,SAAS;gBAAE,QAAQ;gBAAI,YAAY,EAAE;YAAC;YAC1C,IAAI,eAAmE,EAAE;YACzE,IAAI,SAAS;YAEb,4DAA4D;YAC5D,MAAO,CAAC,KAAM;gBACZ,MAAM,EAAE,KAAK,EAAE,MAAM,WAAW,EAAE,GAAG,MAAM,OAAO,IAAI;gBACtD,OAAO;gBACP,IAAI,aAAa,QAAQ,MAAM,CAAC;gBAChC,uCAAuC;gBACvC,IAAI,CAAC,YAAY;gBAEjB,UAAU;gBAEV,0FAA0F;gBAC1F,IAAI,OAAO,QAAQ,CAAC,iBAAiB;oBACnC,MAAM,gBAAgB,OAAO,KAAK,CAAC;oBACnC,IAAI,eAAe;wBACjB,MAAM,CAAC,GAAG,SAAS,GAAG;wBACtB,IAAI;4BACF,IAAI,aAAa,gBAAgB;gCAC/B,MAAM,kBACJ;gCACF,MAAM,UAAU;uCAAI,OAAO,QAAQ,CAAC;iCAAiB;gCAErD,KAAK,MAAM,SAAS,QAAS;oCAC3B,MAAM,CAAC,WAAW,eAAe,QAAQ,GAAG;oCAC5C,IAAI,SAAS;wCACX,IAAI;4CACF,MAAM,SAAS,KAAK,KAAK,CAAC;4CAC1B,aAAa,IAAI,CAAC;gDAAE,MAAM;gDAAe;4CAAO;4CAChD,SAAS,OAAO,OAAO,CAAC,WAAW;wCACrC,EAAE,OAAO,OAAO,CAChB;oCACF;gCACF;4BACF,OAAO;gCACL,uFAAuF;gCACvF,MAAM,YAAY,OAAO,KAAK,CAC5B;gCAEF,IAAI,WAAW;oCACb,MAAM,CAAC,GAAG,QAAQ,GAAG;oCACrB,OAAO,KAAK,CAAC;oCACb,MAAM,SAAS,OAAO,UAAU;oCAChC,SAAS;oCACT,OAAO,KAAK;gCACd;4BACF;wBACF,EAAE,OAAO,GAAG;4BACV,QAAQ,GAAG,CAAC,yBAAyB;wBACvC;oBACF;gBACF;gBAEA,+CAA+C;gBAC/C,WAAW,CAAC;oBACV,MAAM,aAAa,SAAS,CAAC,UAAU,MAAM,GAAG,EAAE;oBAClD,OAAO;2BACF,UAAU,KAAK,CAAC,GAAG,CAAC;wBACvB;4BACE,GAAG,UAAU;4BACb,OAAO;4BACP,QAAQ;wBACV;qBACD;gBACH;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;QAChB,SAAU;YACR,gBAAgB;QAClB;IACF;IAEA,oDAAoD;IACpD,SAAS,cAAc,CAA2C;QAChE,IAAI,EAAE,IAAI,KAAK,WAAW,CAAC,EAAE,QAAQ,EAAE;YACrC,OAAO;QACT;IACF;IAEA,sDAAsD;IACtD,MAAM,eAAe;QACnB,MAAM,WAAW,YAAY,OAAO;QACpC,IAAI,UAAU;YACZ,SAAS,KAAK,CAAC,MAAM,GAAG;YACxB,SAAS,KAAK,CAAC,MAAM,GAAG,GAAG,SAAS,YAAY,CAAC,EAAE,CAAC;QACtD;IACF;IAEA,8CAA8C;IAC9C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR;QACF;6BAAG;QAAC;KAAK;IAET,8DAA8D;IAC9D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,MAAM;mDAAe,IAAM;;YAC3B,OAAO,gBAAgB,CAAC,UAAU;YAClC;sCAAO,IAAM,OAAO,mBAAmB,CAAC,UAAU;;QACpD;6BAAG,EAAE;IAEL,qBACE,6LAAC;QACC,UAAU;QACV,WAAW,CAAC,gBAAgB,EAC1B,QAAQ,MAAM,GAAG,IAAI,iDAAiD,IACtE;kBAEF,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBACC,KAAK;oBACL,OAAO;oBACP,UAAU,CAAC,IAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;oBACvC,WAAW,CAAC,IAAM,cAAc;oBAChC,MAAM;oBACN,WAAU;oBACV,aAAY;;;;;;8BAGd,6LAAC;oBACC,MAAK;oBACL,UAAU,gBAAgB,CAAC;oBAC3B,WAAU;8BAEV,cAAA,6LAAC;;;;;;;;;;;;;;;;;;;;;AAKX;GApMM;KAAA;AAsMN,MAAM,YAAY,kBAChB,6LAAC;QACC,OAAM;QACN,OAAM;QACN,QAAO;QACP,SAAQ;QACR,MAAK;QACL,QAAO;QACP,aAAY;QACZ,eAAc;QACd,gBAAe;QACf,WAAU;;0BAEV,6LAAC;gBAAK,GAAE;;;;;;0BACR,6LAAC;gBAAK,GAAE;;;;;;;;;;;;MAdN;uCAkBS"}},
    {"offset": {"line": 632, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 638, "column": 0}, "map": {"version":3,"sources":["file:///Users/aaron/Documents/MYRA-langchain/frontend/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport Output from \"@/components/Output\";\nimport TextArea from \"@/components/TextArea\";\nimport { type ChatOutput } from \"@/types\";\nimport { useState } from \"react\";\nimport MostRecentStrategyDisplay from \"@/components/MostRecentStrategyDisplay\"; \"@/components/MostRecentStrategyDisplay\";\n\nexport default function Home() {\n  const [outputs, setOutputs] = useState<ChatOutput[]>([]);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  return (\n    <div\n      className={`container pt-10 pb-32 min-h-screen ${\n        outputs.length === 0 && \"flex items-center justify-center\"\n      }`}\n    >\n      <div className=\"w-full\">\n        {outputs.length === 0 && (\n          <h1 className=\"text-4xl text-center mb-5\">\n            What do you want to know?\n          </h1>\n        )}\n\n        <TextArea className={\"bg-white text-black border border-gray-300 rounded-md p-3 w-full\"}\n          setIsGenerating={setIsGenerating}\n          isGenerating={isGenerating}\n          outputs={outputs}\n          setOutputs={setOutputs}\n        />\n\n        {outputs.map((output, i) => {\n          return <Output key={i} output={output} isGenerating={isGenerating}/>;\n        })}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;;;AALA;;;;AAMgF;AAEjE,SAAS;;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IACvD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,qBACE,6LAAC;QACC,WAAW,CAAC,mCAAmC,EAC7C,QAAQ,MAAM,KAAK,KAAK,oCACxB;kBAEF,cAAA,6LAAC;YAAI,WAAU;;gBACZ,QAAQ,MAAM,KAAK,mBAClB,6LAAC;oBAAG,WAAU;8BAA4B;;;;;;8BAK5C,6LAAC,iIAAA,CAAA,UAAQ;oBAAC,WAAW;oBACnB,iBAAiB;oBACjB,cAAc;oBACd,SAAS;oBACT,YAAY;;;;;;gBAGb,QAAQ,GAAG,CAAC,CAAC,QAAQ;oBACpB,qBAAO,6LAAC,+HAAA,CAAA,UAAM;wBAAS,QAAQ;wBAAQ,cAAc;uBAAjC;;;;;gBACtB;;;;;;;;;;;;AAIR;GA9BwB;KAAA"}},
    {"offset": {"line": 709, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}